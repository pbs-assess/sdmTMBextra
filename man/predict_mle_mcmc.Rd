% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample-re-mcmc.R
\name{predict_mle_mcmc}
\alias{predict_mle_mcmc}
\alias{sample_mle_mcmc}
\title{Predict from an sdmTMB model with random effects sampled via MCMC}
\usage{
predict_mle_mcmc(
  object,
  model = c(1, 2),
  mcmc_iter = 500,
  mcmc_warmup = 250,
  print_stan_model = FALSE,
  stan_args = NULL,
  nsim = 1
)

sample_mle_mcmc(
  object,
  mcmc_warmup = 250,
  mcmc_iter = 500,
  mcmc_chains = 1,
  stan_args = NULL
)
}
\arguments{
\item{object}{An \code{\link[sdmTMB:sdmTMB]{sdmTMB::sdmTMB()}} model}

\item{model}{Which delta/hurdle model component?}

\item{mcmc_iter}{Iterations for MCMC residuals. Will take the last one.}

\item{mcmc_warmup}{Warmup for MCMC residuals.}

\item{print_stan_model}{Print the Stan model from MCMC residuals?}

\item{stan_args}{A list of arguments that will be passed to \code{\link[rstan:stanmodel-method-sampling]{rstan::sampling()}}.}

\item{nsim}{Number of MCMC samples to return.}

\item{mcmc_chains}{MCMC chains.}
}
\description{
Calculates predictions in link space on the original fitted data with random
effects estimated with MCMC via rstan/tmbstan while fixing fixed effects at
their MLE values. This avoids the Laplace approximation, which is useful for
checking residuals among other uses.
}
\examples{
library(sdmTMB)
mesh <- make_mesh(pcod_2011, c("X", "Y"), cutoff = 10)
fit <- sdmTMB(
  present ~ as.factor(year) + poly(depth, 3),
  data = pcod_2011, mesh = mesh,
  family = binomial()
)

# MCMC-based with fixed effects at MLEs; best but can be slow:
set.seed(2938)
samp <- predict_mle_mcmc(fit, mcmc_iter = 101, mcmc_warmup = 100, print_stan_model = TRUE)
r <- residuals(fit, type = "mle-mcmc", mcmc_samples = samp)
qqnorm(r)
qqline(r)

# Example of passing control arguments to rstan::sampling():
# 11 iterations used for a quick example; don't do this normally
stan_args <- list(control = list(adapt_delta = 0.9, max_treedepth = 12))
samp <- predict_mle_mcmc(fit, mcmc_iter = 101, mcmc_warmup = 100, stan_args = stan_args)
r <- residuals(fit, type = "mle-mcmc", mcmc_samples = samp)

stan_fit <- sample_mle_mcmc(fit, mcmc_iter = 200, mcmc_warmup = 100)
stan_fit
}
